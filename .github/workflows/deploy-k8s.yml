name: Deploy to K8s

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy-backend:
    name: Build and Deploy Backend Services
    runs-on: self-hosted
    environment: prod

    env:
      DOCKER_COMPOSE_FILE: docker-compose.prod.yml
      DOCKER_HOST: tcp://10.0.0.35:2375
      K8S_HOST: 10.0.0.40
      DOCKER_CONTEXT_NAME: karlcam-backend-ctx

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean Docker build cache
        run: |
          docker builder prune -a -f
          docker system prune -f

      - name: Build Pipeline service
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build pipeline

      - name: Build Backend service
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build backend

      - name: List built images
        run: |
          echo "=== All Docker images after build ==="
          docker images --format "table {{.Repository}}:{{.Tag}}" | head -20
          echo ""
          echo "=== Images matching karlcam/pipeline/backend ==="
          docker images | grep -E "(karlcam|pipeline|backend)" || echo "No matching images found"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.K8S_HOST }} >> ~/.ssh/known_hosts

      - name: Set up Docker context
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} \
            --docker host=${{ env.DOCKER_HOST }} || true

      - name: Clean up remote Docker host
        run: |
          echo "Cleaning up Docker host to free space..."
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} system prune -af || true
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} volume prune -f || true
          echo "Available space after cleanup:"
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} system df

      - name: Transfer and push backend images to registry
        run: |
          for service in pipeline backend; do
            local_image="karlcam-${service}:latest"
            registry_image="10.0.0.35:5000/karlcam-${service}:latest"
            
            echo "Transferring $local_image to remote Docker..."
            docker save "$local_image" | docker --context ${{ env.DOCKER_CONTEXT_NAME }} load
            
            echo "Tagging for registry: $registry_image"
            docker --context ${{ env.DOCKER_CONTEXT_NAME }} tag "$local_image" "$registry_image"
            
            echo "Pushing to registry: $registry_image"
            docker --context ${{ env.DOCKER_CONTEXT_NAME }} push "$registry_image"
          done

      - name: Deploy backend services to K8s
        run: |
          # Update manifests with registry image names
          for file in k8s/00-namespace.yaml k8s/01-storage.yaml k8s/02-pipeline.yaml k8s/03-backend.yaml; do
            sed -i 's|image: karlcam/\([^:]*\):latest|image: 10.0.0.35:5000/karlcam-\1:latest|g' $file
          done
          
          # Copy backend manifests to K8s control plane
          scp k8s/00-namespace.yaml k8s/01-storage.yaml k8s/02-pipeline.yaml k8s/03-backend.yaml ubuntu@${{ env.K8S_HOST }}:/tmp/
          
          # Apply backend manifests
          ssh ubuntu@${{ env.K8S_HOST }} << 'EOF'
            sudo kubectl apply -f /tmp/00-namespace.yaml
            sudo kubectl apply -f /tmp/01-storage.yaml
            sudo kubectl apply -f /tmp/02-pipeline.yaml
            sudo kubectl apply -f /tmp/03-backend.yaml
            
            # Wait for backend deployments
            sudo kubectl -n karlcam rollout status deployment/karlcam-pipeline --timeout=5m
            sudo kubectl -n karlcam rollout status deployment/karlcam-backend --timeout=5m
            
            # Show backend status
            sudo kubectl -n karlcam get pods
          EOF

      - name: Cleanup
        if: always()
        run: |
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true

  build-and-deploy-frontend:
    name: Build and Deploy Frontend Services
    runs-on: self-hosted
    environment: prod
    needs: build-and-deploy-backend

    env:
      DOCKER_COMPOSE_FILE: docker-compose.prod.yml
      DOCKER_HOST: tcp://10.0.0.35:2375
      K8S_HOST: 10.0.0.40
      DOCKER_CONTEXT_NAME: karlcam-frontend-ctx

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Public Frontend
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build public-frontend

      - name: Build Pipeline Frontend
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build pipeline-frontend

      - name: List built frontend images
        run: |
          echo "=== All Docker images after frontend build ==="
          docker images --format "table {{.Repository}}:{{.Tag}}" | head -20
          echo ""
          echo "=== Images matching karlcam/frontend ==="
          docker images | grep -E "(karlcam|frontend)" || echo "No matching images found"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.K8S_HOST }} >> ~/.ssh/known_hosts

      - name: Set up Docker context
        run: |
          docker context create ${{ env.DOCKER_CONTEXT_NAME }} \
            --docker host=${{ env.DOCKER_HOST }} || true

      - name: Clean up remote Docker host
        run: |
          echo "Cleaning up Docker host to free space..."
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} system prune -af || true
          echo "Available space after cleanup:"
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} system df

      - name: Transfer and push frontend images to registry
        run: |
          for service in public-frontend pipeline-frontend; do
            local_image="karlcam-${service}:latest"
            registry_image="10.0.0.35:5000/karlcam-${service}:latest"
            
            echo "Transferring $local_image to remote Docker..."
            docker save "$local_image" | docker --context ${{ env.DOCKER_CONTEXT_NAME }} load
            
            echo "Tagging for registry: $registry_image"
            docker --context ${{ env.DOCKER_CONTEXT_NAME }} tag "$local_image" "$registry_image"
            
            echo "Pushing to registry: $registry_image"
            docker --context ${{ env.DOCKER_CONTEXT_NAME }} push "$registry_image"
          done

      - name: Deploy frontend services to K8s
        run: |
          # Update manifests with registry image names
          for file in k8s/04-public-frontend.yaml k8s/05-pipeline-frontend.yaml; do
            sed -i 's|image: karlcam/\([^:]*\):latest|image: 10.0.0.35:5000/karlcam-\1:latest|g' $file
          done
          
          # Copy frontend manifests to K8s control plane
          scp k8s/04-public-frontend.yaml k8s/05-pipeline-frontend.yaml ubuntu@${{ env.K8S_HOST }}:/tmp/
          
          # Apply frontend manifests
          ssh ubuntu@${{ env.K8S_HOST }} << 'EOF'
            sudo kubectl apply -f /tmp/04-public-frontend.yaml
            sudo kubectl apply -f /tmp/05-pipeline-frontend.yaml
            
            # Wait for frontend deployments
            sudo kubectl -n karlcam rollout status deployment/karlcam-public-frontend --timeout=5m
            sudo kubectl -n karlcam rollout status deployment/karlcam-pipeline-frontend --timeout=5m
            
            # Show complete status
            sudo kubectl -n karlcam get all
          EOF

      - name: Cleanup
        if: always()
        run: |
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true
          docker image prune -f