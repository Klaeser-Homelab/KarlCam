name: Deploy FogCam Collector

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy FogCam
    runs-on: self-hosted
    environment: prod

    env:
      DOCKER_HOST: tcp://10.0.0.49:2375  # Use your server IP
      DOCKER_COMPOSE_FILE: docker-compose.prod.yml
      DOCKER_CONTEXT_NAME: fogcam-ctx
      FOGCAM_IMAGE: fogcam-collector:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean Docker build cache
        run: |
          echo "=== Cleaning Docker build cache ==="
          docker builder prune -a -f
          docker system prune -f
          echo "=== Docker space after cleanup ==="
          docker system df
          echo "=== Disk space after cleanup ==="
          df -h

      - name: Build all services
        run: |
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build

      - name: Set up Docker context
        run: |
          docker context \
            create ${{ env.DOCKER_CONTEXT_NAME }} \
            --docker host=${{ env.DOCKER_HOST }}

      - name: Save and load images to remote Docker
        run: |
          # Save all built images
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} config --services | while read service; do
            image_name="karlcam-${service}:latest"
            docker save "$image_name" > "${service}.tar"
            docker --context ${{ env.DOCKER_CONTEXT_NAME }} load < "${service}.tar"
            rm "${service}.tar"
          done

      - name: Create volume if not exists
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} volume create data || true

      - name: Stop existing services
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            down || true

      - name: Deploy all services
        run: |
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            up -d --remove-orphans

      - name: Check deployment status
        run: |
          echo "Checking if all services are running..."
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            ps
          
          echo "Recent logs from all services:"
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} compose --file ${{ env.DOCKER_COMPOSE_FILE }} \
            logs --tail=10

      - name: Cleanup remote Docker server
        run: |
          echo "Cleaning up remote Docker server..."
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} image prune -f
          docker --context ${{ env.DOCKER_CONTEXT_NAME }} builder prune -f

      - name: Debug - Check disk space
        if: failure()
        run: |
          echo "=== Disk Space Check ==="
          df -h
          echo ""
          echo "=== Docker System Information ==="
          docker system df
          echo ""
          echo "=== Largest Directories ==="
          du -h -d 1 / 2>/dev/null | sort -hr | head -20
          echo ""
          echo "=== Docker Images ==="
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          echo ""
          echo "=== Docker Containers ==="
          docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Size}}"
          echo ""
          echo "=== Docker Build Cache ==="
          docker builder du
          echo ""
          echo "=== Temporary Files ==="
          du -sh /tmp/* 2>/dev/null | sort -hr | head -10
          echo ""
          echo "=== Pip Cache ==="
          du -sh ~/.cache/pip 2>/dev/null || echo "No pip cache found"

      - name: Cleanup
        if: always()
        run: |
          docker image prune -f
          docker builder prune -f
          docker context rm ${{ env.DOCKER_CONTEXT_NAME }} --force || true