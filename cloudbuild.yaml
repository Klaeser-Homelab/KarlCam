# Cloud Build configuration for KarlCam
# Handles both staging and production deployments based on branch

substitutions:
  _PROJECT_ID: karlcam
  _REGION: us-central1
  _BUCKET_NAME: karlcam-fog-data

options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON
  machineType: 'E2_HIGHCPU_8'

steps:
  # Build all Docker images in parallel
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-collector'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-collector:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-collector:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-collector:latest'
      - '-f'
      - 'collect/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-labeler'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-labeler:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-labeler:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-labeler:latest'
      - '-f'
      - 'label/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-api'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:latest'
      - '-f'
      - 'web/api/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-admin-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:latest'
      - '-f'
      - 'admin/backend/infra/Dockerfile.prod'
      - '.'

  # Build frontend with npm - conditional API URL based on branch
  - name: 'node:18-alpine'
    id: 'npm-frontend'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd web/frontend
        npm ci
        if [ "${BRANCH_NAME}" = "staging" ]; then
          REACT_APP_API_BASE_URL=https://api.staging.karl.cam npm run build
        else
          REACT_APP_API_BASE_URL=https://api.karl.cam npm run build
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:latest'
      - '-f'
      - 'web/frontend/infra/Dockerfile.prod'
      - '.'
    waitFor: ['npm-frontend']

  # Build admin frontend with npm - conditional API URL based on branch
  - name: 'node:18-alpine'
    id: 'npm-admin-frontend'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd admin/frontend
        npm ci
        if [ "${BRANCH_NAME}" = "staging" ]; then
          REACT_APP_API_BASE_URL=https://admin-api.staging.karl.cam npm run build
        else
          REACT_APP_API_BASE_URL=https://admin-api.karl.cam npm run build
        fi

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-admin-frontend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:latest'
      - '-f'
      - 'admin/frontend/infra/Dockerfile.prod'
      - '.'
    waitFor: ['npm-admin-frontend']

  # Push all images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-collector'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-collector']
    waitFor: ['build-collector']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-labeler'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-labeler']
    waitFor: ['build-labeler']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-api'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-api']
    waitFor: ['build-api']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-frontend']
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-admin-backend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend']
    waitFor: ['build-admin-backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-admin-frontend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend']
    waitFor: ['build-admin-frontend']

  # Conditional Terraform deployment based on branch
  - name: 'hashicorp/terraform:1.5'
    id: 'terraform-deploy'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ "${BRANCH_NAME}" = "staging" ] || [ "${BRANCH_NAME}" = "main" ]; then
          echo "üöÄ Deploying to environment based on branch: ${BRANCH_NAME}"
          
          # Determine environment
          if [ "${BRANCH_NAME}" = "staging" ]; then
            ENVIRONMENT="staging"
            echo "üì¶ Deploying to STAGING environment"
          elif [ "${BRANCH_NAME}" = "main" ]; then
            ENVIRONMENT="production"
            echo "üö® Deploying to PRODUCTION environment"
            echo "Note: This deployment requires manual approval in Cloud Build trigger"
          else
            echo "‚ùå Unknown branch: ${BRANCH_NAME}"
            exit 1
          fi
          
          # Initialize Terraform
          cd terraform
          terraform init -backend-config="bucket=karlcam-terraform-state" \
                        -backend-config="prefix=terraform/state/${ENVIRONMENT}"
          
          # Select or create workspace
          terraform workspace select ${ENVIRONMENT} || terraform workspace new ${ENVIRONMENT}
          
          # Apply Terraform configuration
          terraform apply -auto-approve \
            -var-file="environments/${ENVIRONMENT}/terraform.tfvars" \
            -var="image_tag=${SHORT_SHA}" \
            -var="project_id=${_PROJECT_ID}" \
            -var="database_password=${_DATABASE_PASSWORD}" \
            -var="gemini_api_key=${_GEMINI_API_KEY}"
          
          echo "‚úÖ Deployment to ${ENVIRONMENT} completed successfully!"
          
          # Output useful information
          echo ""
          echo "üìä Deployment Summary:"
          echo "Environment: ${ENVIRONMENT}"
          echo "Image Tag: ${SHORT_SHA}"
          if [ "${ENVIRONMENT}" = "staging" ]; then
            echo "Frontend URL: https://staging.karl.cam"
            echo "API URL: https://api.staging.karl.cam"
            echo "Admin URL: https://admin.staging.karl.cam"
          else
            echo "Frontend URL: https://karl.cam"
            echo "API URL: https://api.karl.cam"
            echo "Admin URL: https://admin.karl.cam"
          fi
        else
          echo "‚è≠Ô∏è  Skipping deployment - branch ${BRANCH_NAME} is not configured for auto-deployment"
          echo "Only 'staging' and 'main' branches trigger deployments"
        fi
    env:
      - 'TF_VAR_database_password=${_DATABASE_PASSWORD}'
      - 'TF_VAR_gemini_api_key=${_GEMINI_API_KEY}'
    secretEnv: ['DATABASE_PASSWORD', 'GEMINI_API_KEY']
    waitFor: 
      - 'push-collector'
      - 'push-labeler'
      - 'push-api'
      - 'push-frontend'
      - 'push-admin-backend'
      - 'push-admin-frontend'

# Secrets configuration
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/database-password/versions/latest
      env: 'DATABASE_PASSWORD'
    - versionName: projects/${_PROJECT_ID}/secrets/gemini-api-key/versions/latest
      env: 'GEMINI_API_KEY'

images:
  - 'gcr.io/${_PROJECT_ID}/karlcam-collector:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-collector:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-labeler:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-labeler:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-api:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-api:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${BRANCH_NAME}'

timeout: '1800s'