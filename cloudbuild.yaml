# Cloud Build configuration for KarlCam
# Handles both staging and production deployments based on branch

substitutions:
  _PROJECT_ID: karlcam
  _REGION: us-central1
  _BUCKET_NAME: karlcam-fog-data
  _RUN_ASYNC_TESTS: 'true'  # Set to 'false' to skip async tests

options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON
  machineType: 'E2_HIGHCPU_8'

steps:
  # Build Docker images

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-pipeline'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-pipeline:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-pipeline:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-pipeline:latest'
      - '-f'
      - 'pipeline/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-api'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-api:latest'
      - '-f'
      - 'web/api/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-admin-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:latest'
      - '-f'
      - 'admin/backend/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '--build-arg'
      - 'REACT_APP_ENVIRONMENT=${_ENVIRONMENT}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:latest'
      - '-f'
      - 'web/frontend/infra/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-admin-frontend'
    args:
      - 'build'
      - '--build-arg'
      - 'REACT_APP_ENVIRONMENT=${_ENVIRONMENT}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:latest'
      - '-f'
      - 'admin/frontend/infra/Dockerfile.prod'
      - '.'

  # Push all images

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-pipeline'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-pipeline']
    waitFor: ['build-pipeline']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-api'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-api']
    waitFor: ['build-api']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-frontend']
    waitFor: ['build-frontend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-admin-backend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend']
    waitFor: ['build-admin-backend']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-admin-frontend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend']
    waitFor: ['build-admin-frontend']

  # Deploy environment-specific infrastructure  
  - name: 'hashicorp/terraform:1.5'
    id: 'terraform-deploy'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üöÄ Deploying to ${_ENVIRONMENT} environment"
        
        # Initialize Terraform with remote backend
        cd terraform
        terraform init -backend-config="bucket=karlcam-terraform-state" \
                      -backend-config="prefix=terraform/state/${_ENVIRONMENT}" \
                      -reconfigure
        
        # Select or create workspace  
        terraform workspace select ${_ENVIRONMENT} || terraform workspace new ${_ENVIRONMENT}
        
        # Apply Terraform configuration
        terraform apply -auto-approve \
          -var-file="environments/${_ENVIRONMENT}/terraform.tfvars" \
          -var="image_tag=${SHORT_SHA}" \
          -var="project_id=${_PROJECT_ID}" \
          -var="database_password=${_DATABASE_PASSWORD}" \
          -var="gemini_api_key=${_GEMINI_API_KEY}"
        
        echo "‚úÖ Deployment to ${_ENVIRONMENT} completed successfully!"
        
        # Populate staging with fresh data
        if [ "${_ENVIRONMENT}" = "staging" ]; then
          echo ""
          echo "üîÑ Populating staging with fresh data..."
          
          # Update timestamps on most recent images to make them "current"
          echo "üìÖ Updating image timestamps for immediate visibility..."
          gcloud sql databases execute-sql karlcam-db \
            --project=${_PROJECT_ID} \
            --sql="UPDATE image_collections SET timestamp = NOW() - INTERVAL '5 minutes' WHERE id IN (SELECT DISTINCT ON (webcam_id) id FROM image_collections ORDER BY webcam_id, timestamp DESC);" \
            || echo "‚ö†Ô∏è  Timestamp update failed, continuing anyway"
          
          # Run unified pipeline job to collect and label data
          echo "üöÄ Running unified pipeline job (collect + label)..."
          gcloud run jobs execute karlcam-pipeline-staging \
            --region=${_REGION} \
            --project=${_PROJECT_ID} \
            --wait \
            || echo "‚ö†Ô∏è  Pipeline job failed, continuing anyway"
          
          echo "‚úÖ Staging data population completed!"
        fi
        
        # Output useful information
        echo ""
        echo "üìä Deployment Summary:"
        echo "Environment: ${_ENVIRONMENT}"
        echo "Image Tag: ${SHORT_SHA}"
        if [ "${_ENVIRONMENT}" = "staging" ]; then
          echo "Frontend URL: https://staging.karl.cam"
          echo "API URL: https://api.staging.karl.cam"
          echo "Admin URL: https://admin.staging.karl.cam"
          echo ""
          echo "üöÄ Site is now live! You can test manually while automated tests run in background."
        else
          echo "Frontend URL: https://karl.cam"
          echo "API URL: https://api.karl.cam"  
          echo "Admin URL: https://admin.karl.cam"
        fi
    env:
      - 'TF_VAR_database_password=${_DATABASE_PASSWORD}'
      - 'TF_VAR_gemini_api_key=${_GEMINI_API_KEY}'
    secretEnv: ['DATABASE_PASSWORD', 'GEMINI_API_KEY']
    waitFor: 
      - 'push-pipeline'
      - 'push-api'
      - 'push-frontend'
      - 'push-admin-backend'
      - 'push-admin-frontend'

  # ===========================================
  # ASYNCHRONOUS TESTING (runs after deployment)
  # ===========================================
  
  # Run comprehensive API tests in background (staging only)
  - name: 'python:3.9-slim'
    id: 'async-api-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Only run tests for staging environment and if enabled
        if [ "${_ENVIRONMENT}" != "staging" ] || [ "${_RUN_ASYNC_TESTS}" != "true" ]; then
          echo "‚è≠Ô∏è  Skipping async tests (Environment: ${_ENVIRONMENT}, Tests enabled: ${_RUN_ASYNC_TESTS})"
          exit 0
        fi
        
        echo "üß™ Running comprehensive API tests asynchronously..."
        echo "üí° Site is already live at https://staging.karl.cam - you can test manually!"
        
        # Install dependencies
        apt-get update && apt-get install -y git curl
        
        # Install dependencies from workspace root
        pip install -r web/api/requirements.txt -r web/api/requirements-test.txt
        
        # Run tests from the web/api directory with proper PYTHONPATH
        cd web/api
        export PYTHONPATH=/workspace/web/api:$$PYTHONPATH
        
        echo "üèÉ Running unit tests..."
        python -m pytest tests/ -m unit -v --tb=short
        
        echo "üîó Running integration tests..."
        python -m pytest tests/ -m integration -v --tb=short
        
        echo "‚úÖ All async API tests completed!"
        
        # Optional: Post results to Slack/notification system
        # curl -X POST webhook-url -d "API tests completed for staging deploy ${SHORT_SHA}"
    waitFor: ['terraform-deploy']  # Runs AFTER deployment completes

  # Run smoke tests against the live site
  - name: 'python:3.9-slim'
    id: 'async-smoke-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Only run for staging and if async tests enabled
        if [ "${_ENVIRONMENT}" != "staging" ] || [ "${_RUN_ASYNC_TESTS}" != "true" ]; then
          echo "‚è≠Ô∏è  Skipping smoke tests (Environment: ${_ENVIRONMENT}, Tests enabled: ${_RUN_ASYNC_TESTS})"
          exit 0
        fi
        
        echo "üå™Ô∏è  Running smoke tests against live staging site..."
        
        pip install requests
        
        # Wait a moment for services to be fully ready
        echo "‚è∞ Waiting 30s for services to fully initialize..."
        sleep 30
        
        # Test all public endpoints
        echo "üîç Testing API endpoints..."
        
        echo "Testing /api/public/..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.staging.karl.cam/api/public/" --max-time 15)
        if [ "$response" = "200" ]; then
          echo "‚úÖ /api/public/ - OK"  
        else
          echo "‚ö†Ô∏è  /api/public/ - HTTP $response (continuing anyway)"
        fi
        
        echo "Testing /api/public/cameras..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.staging.karl.cam/api/public/cameras" --max-time 15)
        if [ "$response" = "200" ]; then
          echo "‚úÖ /api/public/cameras - OK"  
        else
          echo "‚ö†Ô∏è  /api/public/cameras - HTTP $response (continuing anyway)"
        fi
        
        echo "Testing /api/public/stats..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.staging.karl.cam/api/public/stats" --max-time 15)
        if [ "$response" = "200" ]; then
          echo "‚úÖ /api/public/stats - OK"  
        else
          echo "‚ö†Ô∏è  /api/public/stats - HTTP $response (continuing anyway)"
        fi
        
        echo "Testing /api/public/config/public..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "https://api.staging.karl.cam/api/public/config/public" --max-time 15)
        if [ "$response" = "200" ]; then
          echo "‚úÖ /api/public/config/public - OK"  
        else
          echo "‚ö†Ô∏è  /api/public/config/public - HTTP $response (continuing anyway)"
        fi
        
        # Test frontend
        echo "üîç Testing frontend..."
        frontend_response=$(curl -s -o /dev/null -w "%{http_code}" "https://staging.karl.cam" --max-time 15)
        if [ "$frontend_response" = "200" ]; then
          echo "‚úÖ Frontend - OK"
        else
          echo "‚ö†Ô∏è  Frontend - HTTP $frontend_response"  
        fi
        
        echo "‚úÖ Smoke tests completed!"
    waitFor: ['terraform-deploy']  # Also runs after deployment

# Secrets configuration
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/karlcam-db-password-${_ENVIRONMENT}/versions/latest
      env: 'DATABASE_PASSWORD'
    - versionName: projects/${_PROJECT_ID}/secrets/gemini-api-key-${_ENVIRONMENT}/versions/latest
      env: 'GEMINI_API_KEY'

images:
  - 'gcr.io/${_PROJECT_ID}/karlcam-pipeline:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-pipeline:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-api:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-api:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-frontend:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-backend:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/karlcam-admin-frontend:${BRANCH_NAME}'

timeout: '2400s'  # Extended timeout for async tests